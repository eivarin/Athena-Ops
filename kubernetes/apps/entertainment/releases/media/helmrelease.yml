---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name ${KS_NAME}
spec:
  interval: 30m
  chartRef:
    kind: HelmChart
    name: bjw-s
    namespace: flux-system
  values:
    defaultPodOptions:
      nodeSelector:
        node-role.kubernetes.io/worker: ""
    controllers:
      sonarr:
        pod:
          hostname: sonarr
          annotations:
            app.kubernetes.io/name: sonarr
            app.kubernetes.io/instance: sonarr
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/sonarr
              tag: 4.0.10
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &sonarr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &sonarr-port 8989
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *sonarr-probes
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi
      radarr:
        pod:
          hostname: radarr
          annotations:
            app.kubernetes.io/name: radarr
            app.kubernetes.io/instance: radarr
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/radarr
              tag: 5.14.0
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &radarr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &radarr-port 7878
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *radarr-probes
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi
      readarr:
        pod:
          hostname: readarr
          annotations:
            app.kubernetes.io/name: readarr
            app.kubernetes.io/instance: readarr
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/readarr
              tag: 0.4.4-nightly
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &readarr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &readarr-port 8787
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *readarr-probes
            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi
      deluge:
        pod:
          hostname: deluge
          annotations:
            app.kubernetes.io/name: deluge
            app.kubernetes.io/instance: deluge
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/deluge
              tag: 2.1.1
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
              UMASK_SET: 000
              DELUGE_LOGLEVEL: error
            probes:
              liveness: &deluge-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &deluge-port 8112
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *deluge-probes
            resources:
              requests:
                cpu: 100m
                memory: 500Mi
              limits:
                memory: 1Gi
      sabnzbd:
        pod:
          hostname: sabnzbd
          annotations:
            app.kubernetes.io/name: sabnzbd
            app.kubernetes.io/instance: sabnzbd
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/sabnzbd
              tag: 4.3.3
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &sabnzbd-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &sabnzbd-port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *sabnzbd-probes
            resources:
              requests:
                cpu: 500m
                memory: 500Mi
              limits:
                memory: 4Gi
      prowlarr:
        pod:
          hostname: prowlarr
          annotations:
            app.kubernetes.io/name: prowlarr
            app.kubernetes.io/instance: prowlarr
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/prowlarr
              tag: 1.25.4
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &prowlarr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &prowlarr-port 9696
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *prowlarr-probes
            resources:
              requests:
                cpu: 100m
                memory: 500Mi
              limits:
                memory: 1Gi
      flaresolverr:
        pod:
          hostname: flaresolverr
          annotations:
            app.kubernetes.io/name: flaresolverr
            app.kubernetes.io/instance: flaresolverr
        containers:
          app:
            image:
              repository: ghcr.io/flaresolverr/flaresolverr
              tag: v3.3.21
            env:
              LOG_LEVEL: info
              LOG_HTML: false
              CAPTCHA_SOLVER: none
              TZ: ${TIMEZONE}
            probes:
              liveness: &flaresolverr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &flaresolverr-port 8191
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *flaresolverr-probes
            resources:
              requests:
                cpu: 10m
                memory: 150Mi
              limits:
                memory: 500Mi
      jellyseerr:
        pod:
          hostname: jellyseerr
          annotations:
            app.kubernetes.io/name: jellyseerr
            app.kubernetes.io/instance: jellyseerr
        containers:
          app:
            image:
              repository: fallenbagel/jellyseerr
              tag: 2.0.1
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &jellyseerr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v1/status
                    port: &jellyseerr-port 5055
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *jellyseerr-probes
            resources:
              requests:
                cpu: 100m
                memory: 500Mi
              limits:
                memory: 1Gi
      bazarr:
        pod:
          hostname: bazarr
          annotations:
            app.kubernetes.io/name: bazarr
            app.kubernetes.io/instance: bazarr
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/bazarr
              tag: 1.4.5
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &bazarr-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &bazarr-port 6767
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *bazarr-probes
            resources:
              requests:
                cpu: 15m
                memory: 300Mi
              limits:
                memory: 1Gi
      kavita:
        pod:
          hostname: kavita
          annotations:
            app.kubernetes.io/name: kavita
            app.kubernetes.io/instance: kavita
        containers:
          app:
            image:
              repository: lscr.io/linuxserver/kavita
              tag: 0.8.3
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &kavita-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &kavita-port 5000
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *kavita-probes
            resources:
              requests:
                cpu: 15m
                memory: 300Mi
              limits:
                memory: 1Gi
      jellyfin:
        pod:
          hostname: jellyfin
          annotations:
            app.kubernetes.io/name: jellyfin
            app.kubernetes.io/instance: jellyfin
        containers:
          app:
            image:
              repository: jellyfin/jellyfin
              tag: 10.10.3
            env:
              PUID: 1000
              PGID: 1000
              TZ: ${TIMEZONE}
            probes:
              liveness: &jellyfin-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &jellyfin-port 8096
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 10
              readiness: *jellyfin-probes
            resources:
              requests:
                gpu.intel.com/i915: "1"
                memory: 1Gi
              limits:
                gpu.intel.com/i915: "1"
                memory: 4Gi
      jellystat:
        pod:
          hostname: jellystat
          annotations:
            app.kubernetes.io/name: jellystat
            app.kubernetes.io/instance: jellystat
        containers:
          app:
            image:
              repository: cyfershepard/jellystat
              tag: latest
            # command: ["/bin/bash", "-c", "while ! timeout 1 bash -c '</dev/tcp/media-db-postgresql/5432'; do sleep 1; done; chmod +x /app/entry.sh; /app/entry.sh"]
            env:
              POSTGRES_USER: media
              POSTGRES_PASSWORD: password
              POSTGRES_IP: postgresql
              POSTGRES_PORT: 5432
              JWT_SECRET: supersecret
              TZ: ${TIMEZONE}
            probes:
              liveness: &jellystat-probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: &jellystat-port 3000
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *jellystat-probes
            resources:
              requests:
                cpu: 15m
                memory: 300Mi
              limits:
                memory: 1Gi
    service:
      sonarr:
        controller: sonarr
        ports:
          sonarr-http:
            port: *sonarr-port
      radarr:
        controller: radarr
        ports:
          radarr-http:
            port: *radarr-port
      readarr:
        controller: readarr
        ports:
          readarr-http:
            port: *readarr-port
      deluge:
        controller: deluge
        ports:
          deluge-http:
            port: *deluge-port
      sabnzbd:
        controller: sabnzbd
        ports:
          sabnzbd-http:
            port: *sabnzbd-port
      prowlarr:
        controller: prowlarr
        ports:
          prowlarr-http:
            port: *prowlarr-port
      flaresolverr:
        controller: flaresolverr
        ports:
          flaresolverr-http:
            port: *flaresolverr-port
      jellyseerr:
        controller: jellyseerr
        ports:
          jellyseerr-http:
            port: *jellyseerr-port
      bazarr:
        controller: bazarr
        ports:
          bazarr-http:
            port: *bazarr-port
      kavita:
        controller: kavita
        ports:
          kavita-http:
            port: *kavita-port
      jellyfin:
        controller: jellyfin
        ports:
          jellyfin-http:
            port: *jellyfin-port
      jellystat:
        controller: jellystat
        ports:
          jellystat-http:
            port: *jellystat-port
    ingress:
      sonarr:
        annotations: &ingress-anotations
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        className: &ingressClassName traefik-private
        hosts:
          - host: &sonarr-path sonarr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: sonarr
                  port: sonarr-http
        tls:
          - secretName: &tls-home ${SECRET_PRIVATE_DOMAIN//./-}-tls
            hosts:
              - *sonarr-path
      radarr:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &radarr-path radarr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: radarr
                  port: radarr-http
        tls:
          - secretName: *tls-home
            hosts:
              - *radarr-path
      readarr:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &readarr-path readarr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: readarr
                  port: readarr-http
        tls:
          - secretName: *tls-home
            hosts:
              - *readarr-path
      deluge:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &deluge-path deluge.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: deluge
                  port: deluge-http
        tls:
          - secretName: *tls-home
            hosts:
              - *deluge-path
      sabnzbd:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &sabnzbd-path sabnzbd.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: sabnzbd
                  port: sabnzbd-http
        tls:
          - secretName: *tls-home
            hosts:
              - *sabnzbd-path
      prowlarr:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &prowlarr-path prowlarr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: prowlarr
                  port: prowlarr-http
        tls:
          - secretName: *tls-home
            hosts:
              - *prowlarr-path
      jellyseerr:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &jellyseerr-path jellyseerr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: jellyseerr
                  port: jellyseerr-http
        tls:
          - secretName: *tls-home
            hosts:
              - *jellyseerr-path
      bazarr:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &bazarr-path bazarr.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: bazarr
                  port: bazarr-http
        tls:
          - secretName: *tls-home
            hosts:
              - *bazarr-path
      kavita:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &kavita-path kavita.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: kavita
                  port: kavita-http
        tls:
          - secretName: *tls-home
            hosts:
              - *kavita-path
      jellyfin:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &jellyfin-path jellyfin.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: jellyfin
                  port: jellyfin-http
        tls:
          - secretName: *tls-home
            hosts:
              - *jellyfin-path
      jellyfin-public:
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: ${SECRET_PUBLIC_DOMAIN1}
        className: traefik-public
        hosts:
          - host: &jellyfin-public-path jellyfin.${SECRET_PUBLIC_DOMAIN1}
            paths:
              - path: /
                service:
                  identifier: jellyfin
                  port: jellyfin-http
        tls:
          - secretName: jellyfin-${SECRET_PUBLIC_DOMAIN1//./-}-tls
            hosts:
              - *jellyfin-public-path
      jellystat:
        annotations: *ingress-anotations
        className: *ingressClassName
        hosts:
          - host: &jellystat-path jellystat.${SECRET_PRIVATE_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: jellystat
                  port: jellystat-http
        tls:
          - secretName: *tls-home
            hosts:
              - *jellystat-path
    persistence:
      sonarr-config:
        existingClaim: sonarr-config
        globalMounts: []
        advancedMounts:
          sonarr:
            app:
              - path: /config
                readOnly: false
      radarr-config:
        existingClaim: radarr-config
        globalMounts: []
        advancedMounts:
          radarr:
            app:
              - path: /config
                readOnly: false
      readarr-config:
        existingClaim: readarr-config
        globalMounts: []
        advancedMounts:
          readarr:
            app:
              - path: /config
                readOnly: false
      deluge-config:
        existingClaim: deluge-config
        globalMounts: []
        advancedMounts:
          deluge:
            app:
              - path: /config
                readOnly: false
      sabnzbd-config:
        existingClaim: sabnzbd-config
        globalMounts: []
        advancedMounts:
          sabnzbd:
            app:
              - path: /config
                readOnly: false
      prowlarr-config:
        existingClaim: prowlarr-config
        globalMounts: []
        advancedMounts:
          prowlarr:
            app:
              - path: /config
                readOnly: false
      jellyseerr-config:
        existingClaim: jellyseerr-config
        globalMounts: []
        advancedMounts:
          jellyseerr:
            app:
              - path: /app/config
                readOnly: false
      bazarr-config:
        existingClaim: bazarr-config
        globalMounts: []
        advancedMounts:
          bazarr:
            app:
              - path: /config
                readOnly: false
      kavita-config:
        existingClaim: kavita-config
        globalMounts: []
        advancedMounts:
          kavita:
            app:
              - path: /kavita/config
                readOnly: false
      jellyfin-config:
        existingClaim: jellyfin-config
        globalMounts: []
        advancedMounts:
          jellyfin:
            app:
              - path: /config
                readOnly: false
              - path: /var/lib/jellyfin/root
                readOnly: false
                subPath: root
      jellyfin-cache:
        type: emptyDir
        globalMounts: []
        advancedMounts:
          jellyfin:
            app:
              - path: /cache
                readOnly: false
      jellystat-backup-data:
        existingClaim: jellystat-backup-data
        globalMounts: []
        advancedMounts:
          jellystat:
            app:
              - path: /app/backend/backup-data
                readOnly: false
      media:
        enabled: true
        type: persistentVolumeClaim
        existingClaim:  entertainment-storage-nfs-media
        globalMounts:
          - path: /shared/Media
            readOnly: false
