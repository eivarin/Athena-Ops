
controllers:
  dragonfly-operator:
    strategy: RollingUpdate
    pod:
      hostname: &app dragonfly-operator
      annotations:
        app.kubernetes.io/name: *app
        app.kubernetes.io/instance: *app
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile: { type: RuntimeDefault }
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
    containers:
      app:
        image:
          repository: ghcr.io/dragonflydb/operator
          tag: v1.3.0@sha256:ee0daee0bb11185c984bbea92b0e8cc17a06ae4cd246e0d311c814f6948fd27e
        command: ["/manager"]
        args:
          - --health-probe-bind-address=:8081
          - --metrics-bind-address=:8080
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /healthz
                port: &port 8081
              initialDelaySeconds: 15
              periodSeconds: 20
              timeoutSeconds: 1
              failureThreshold: 3
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /readyz
                port: *port
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
        resources:
          requests:
            cpu: 10m
          limits:
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
service:
  app:
    controller: *app
    ports:
      http:
        port: *port
      metrics:
        port: 8080
serviceMonitor:
  app:
    serviceName: *app
    endpoints:
      - port: metrics
        scheme: http
        path: /metrics
        interval: 1m
        scrapeTimeout: 10s
serviceAccount:
  dragonfly-operator: {}
rbac:
  bindings:
    dragonfly-operator:
      roleRef:
        kind: ClusterRole
        name: *app
      subjects:
        - identifier: *app
      type: ClusterRoleBinding
  roles:
    dragonfly-operator:
      rules:
        - apiGroups: ["coordination.k8s.io"]
          resources: ["leases"]
          verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
        - apiGroups: [""]
          resources: ["events"]
          verbs: ["create", "patch"]
        - apiGroups: [""]
          resources: ["pods", "services"]
          verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
        - apiGroups: ["apps"]
          resources: ["statefulsets"]
          verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
        - apiGroups: ["policy"]
          resources: ["poddisruptionbudgets"]
          verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
        - apiGroups: ["dragonflydb.io"]
          resources: ["dragonflies"]
          verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
        - apiGroups: ["dragonflydb.io"]
          resources: ["dragonflies/finalizers"]
          verbs: ["update"]
        - apiGroups: ["dragonflydb.io"]
          resources: ["dragonflies/status"]
          verbs: ["get", "patch", "update"]
      type: ClusterRole
